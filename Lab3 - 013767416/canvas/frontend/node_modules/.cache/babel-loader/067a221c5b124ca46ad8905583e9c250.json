{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _readField = require('./readField');\n\nvar _readField2 = _interopRequireDefault(_readField);\n\nvar _write = require('./write');\n\nvar _write2 = _interopRequireDefault(_write);\n\nvar _getValues = require('./getValues');\n\nvar _getValues2 = _interopRequireDefault(_getValues);\n\nvar _removeField = require('./removeField');\n\nvar _removeField2 = _interopRequireDefault(_removeField);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Reads props and generates (or updates) field structure\n */\n\n\nvar readFields = function readFields(props, previousProps, myFields, asyncValidate, isReactNative) {\n  var fields = props.fields,\n      form = props.form,\n      validate = props.validate;\n  var previousFields = previousProps.fields;\n  var values = (0, _getValues2.default)(fields, form);\n  var syncErrors = validate(values, props) || {};\n  var errors = {};\n  var formError = syncErrors._error || form._error;\n  var allValid = !formError;\n  var allPristine = true;\n\n  var tally = function tally(field) {\n    if (field.error) {\n      errors = (0, _write2.default)(field.name, field.error, errors);\n      allValid = false;\n    }\n\n    if (field.dirty) {\n      allPristine = false;\n    }\n  };\n\n  var fieldObjects = previousFields ? previousFields.reduce(function (accumulator, previousField) {\n    return ~fields.indexOf(previousField) ? accumulator : (0, _removeField2.default)(accumulator, previousField);\n  }, _extends({}, myFields)) : _extends({}, myFields);\n  fields.forEach(function (name) {\n    (0, _readField2.default)(form, name, undefined, fieldObjects, syncErrors, asyncValidate, isReactNative, props, tally);\n  });\n  Object.defineProperty(fieldObjects, '_meta', {\n    value: {\n      allPristine: allPristine,\n      allValid: allValid,\n      values: values,\n      errors: errors,\n      formError: formError\n    }\n  });\n  return fieldObjects;\n};\n\nexports.default = readFields;","map":null,"metadata":{},"sourceType":"script"}