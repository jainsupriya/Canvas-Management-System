{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _actions = require('./actions');\n\nvar importedActions = _interopRequireWildcard(_actions);\n\nvar _getDisplayName = require('./getDisplayName');\n\nvar _getDisplayName2 = _interopRequireDefault(_getDisplayName);\n\nvar _reducer = require('./reducer');\n\nvar _deepEqual = require('deep-equal');\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _bindActionData = require('./bindActionData');\n\nvar _bindActionData2 = _interopRequireDefault(_bindActionData);\n\nvar _getValues = require('./getValues');\n\nvar _getValues2 = _interopRequireDefault(_getValues);\n\nvar _isValid = require('./isValid');\n\nvar _isValid2 = _interopRequireDefault(_isValid);\n\nvar _readFields = require('./readFields');\n\nvar _readFields2 = _interopRequireDefault(_readFields);\n\nvar _handleSubmit2 = require('./handleSubmit');\n\nvar _handleSubmit3 = _interopRequireDefault(_handleSubmit2);\n\nvar _asyncValidation = require('./asyncValidation');\n\nvar _asyncValidation2 = _interopRequireDefault(_asyncValidation);\n\nvar _silenceEvents = require('./events/silenceEvents');\n\nvar _silenceEvents2 = _interopRequireDefault(_silenceEvents);\n\nvar _silenceEvent = require('./events/silenceEvent');\n\nvar _silenceEvent2 = _interopRequireDefault(_silenceEvent);\n\nvar _wrapMapDispatchToProps = require('./wrapMapDispatchToProps');\n\nvar _wrapMapDispatchToProps2 = _interopRequireDefault(_wrapMapDispatchToProps);\n\nvar _wrapMapStateToProps = require('./wrapMapStateToProps');\n\nvar _wrapMapStateToProps2 = _interopRequireDefault(_wrapMapStateToProps);\n\nvar _createInitialState = require('./createInitialState');\n\nvar _createInitialState2 = _interopRequireDefault(_createInitialState);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Creates a HOC that knows how to create redux-connected sub-components.\n */\n\n\nvar createHigherOrderComponent = function createHigherOrderComponent(config, isReactNative, React, connect, WrappedComponent, mapStateToProps, mapDispatchToProps, mergeProps, options) {\n  var Component = React.Component;\n  return function (reduxMountPoint, formName, formKey, getFormState) {\n    var _ref = options || {},\n        _ref$withRef = _ref.withRef,\n        withRef = _ref$withRef === undefined ? false : _ref$withRef;\n\n    var ReduxForm = function (_Component) {\n      _inherits(ReduxForm, _Component);\n\n      function ReduxForm(props) {\n        _classCallCheck(this, ReduxForm); // bind functions\n\n\n        var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n        _this.asyncValidate = _this.asyncValidate.bind(_this);\n        _this.handleSubmit = _this.handleSubmit.bind(_this);\n        var _this$props = _this.props,\n            initialValues = _this$props.initialValues,\n            submitPassback = _this$props.submitPassback; // Check if form state was initialized, if not, initialize it.\n\n        var form = (0, _deepEqual2.default)(props.form, _reducer.initialState) ? (0, _createInitialState2.default)(initialValues, config.fields, {}, true, false) : props.form;\n        _this.fields = (0, _readFields2.default)(_extends({}, props, {\n          form: form\n        }), {}, {}, _this.asyncValidate, isReactNative);\n        submitPassback(function () {\n          return _this.handleSubmit();\n        }); // wrapped in function to disallow params\n\n        return _this;\n      }\n\n      ReduxForm.prototype.componentWillMount = function componentWillMount() {\n        var _props = this.props,\n            fields = _props.fields,\n            form = _props.form,\n            initialize = _props.initialize,\n            initialValues = _props.initialValues;\n\n        if (initialValues && !form._initialized) {\n          initialize(initialValues, fields);\n        }\n      };\n\n      ReduxForm.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n        if (!(0, _deepEqual2.default)(this.props.fields, nextProps.fields) || !(0, _deepEqual2.default)(this.props.form, nextProps.form, {\n          strict: true\n        })) {\n          this.fields = (0, _readFields2.default)(nextProps, this.props, this.fields, this.asyncValidate, isReactNative);\n        }\n\n        if (!(0, _deepEqual2.default)(this.props.initialValues, nextProps.initialValues)) {\n          this.props.initialize(nextProps.initialValues, nextProps.fields, this.props.overwriteOnInitialValuesChange || !this.props.form._initialized);\n        }\n      };\n\n      ReduxForm.prototype.componentWillUnmount = function componentWillUnmount() {\n        if (config.destroyOnUnmount) {\n          this.props.destroy();\n        }\n      };\n\n      ReduxForm.prototype.asyncValidate = function asyncValidate(name, value) {\n        var _this2 = this;\n\n        var _props2 = this.props,\n            alwaysAsyncValidate = _props2.alwaysAsyncValidate,\n            asyncValidate = _props2.asyncValidate,\n            dispatch = _props2.dispatch,\n            fields = _props2.fields,\n            form = _props2.form,\n            startAsyncValidation = _props2.startAsyncValidation,\n            stopAsyncValidation = _props2.stopAsyncValidation,\n            validate = _props2.validate;\n        var isSubmitting = !name;\n\n        if (asyncValidate) {\n          var values = (0, _getValues2.default)(fields, form);\n\n          if (name) {\n            values[name] = value;\n          }\n\n          var syncErrors = validate(values, this.props);\n          var allPristine = this.fields._meta.allPristine;\n          var initialized = form._initialized; // if blur validating, only run async validate if sync validation passes\n          // and submitting (not blur validation) or form is dirty or form was never initialized\n          // unless alwaysAsyncValidate is true\n\n          var syncValidationPasses = isSubmitting || (0, _isValid2.default)(syncErrors[name]);\n\n          if (alwaysAsyncValidate || syncValidationPasses && (isSubmitting || !allPristine || !initialized)) {\n            return (0, _asyncValidation2.default)(function () {\n              return asyncValidate(values, dispatch, _this2.props);\n            }, startAsyncValidation, stopAsyncValidation, name);\n          }\n        }\n      };\n\n      ReduxForm.prototype.handleSubmit = function handleSubmit(submitOrEvent) {\n        var _this3 = this;\n\n        var _props3 = this.props,\n            onSubmit = _props3.onSubmit,\n            fields = _props3.fields,\n            form = _props3.form;\n\n        var check = function check(submit) {\n          if (!submit || typeof submit !== 'function') {\n            throw new Error('You must either pass handleSubmit() an onSubmit function or pass onSubmit as a prop');\n          }\n\n          return submit;\n        };\n\n        return !submitOrEvent || (0, _silenceEvent2.default)(submitOrEvent) ? // submitOrEvent is an event: fire submit\n        (0, _handleSubmit3.default)(check(onSubmit), (0, _getValues2.default)(fields, form), this.props, this.asyncValidate) : // submitOrEvent is the submit function: return deferred submit thunk\n        (0, _silenceEvents2.default)(function () {\n          return (0, _handleSubmit3.default)(check(submitOrEvent), (0, _getValues2.default)(fields, form), _this3.props, _this3.asyncValidate);\n        });\n      };\n\n      ReduxForm.prototype.render = function render() {\n        var _this4 = this,\n            _ref2;\n\n        var allFields = this.fields;\n\n        var _props4 = this.props,\n            addArrayValue = _props4.addArrayValue,\n            asyncBlurFields = _props4.asyncBlurFields,\n            autofill = _props4.autofill,\n            blur = _props4.blur,\n            change = _props4.change,\n            destroy = _props4.destroy,\n            focus = _props4.focus,\n            fields = _props4.fields,\n            form = _props4.form,\n            initialValues = _props4.initialValues,\n            initialize = _props4.initialize,\n            onSubmit = _props4.onSubmit,\n            propNamespace = _props4.propNamespace,\n            reset = _props4.reset,\n            removeArrayValue = _props4.removeArrayValue,\n            returnRejectedSubmitPromise = _props4.returnRejectedSubmitPromise,\n            startAsyncValidation = _props4.startAsyncValidation,\n            startSubmit = _props4.startSubmit,\n            stopAsyncValidation = _props4.stopAsyncValidation,\n            stopSubmit = _props4.stopSubmit,\n            submitFailed = _props4.submitFailed,\n            swapArrayValues = _props4.swapArrayValues,\n            touch = _props4.touch,\n            untouch = _props4.untouch,\n            validate = _props4.validate,\n            passableProps = _objectWithoutProperties(_props4, ['addArrayValue', 'asyncBlurFields', 'autofill', 'blur', 'change', 'destroy', 'focus', 'fields', 'form', 'initialValues', 'initialize', 'onSubmit', 'propNamespace', 'reset', 'removeArrayValue', 'returnRejectedSubmitPromise', 'startAsyncValidation', 'startSubmit', 'stopAsyncValidation', 'stopSubmit', 'submitFailed', 'swapArrayValues', 'touch', 'untouch', 'validate']); // eslint-disable-line no-redeclare\n\n\n        var _allFields$_meta = allFields._meta,\n            allPristine = _allFields$_meta.allPristine,\n            allValid = _allFields$_meta.allValid,\n            errors = _allFields$_meta.errors,\n            formError = _allFields$_meta.formError,\n            values = _allFields$_meta.values;\n        var props = {\n          // State:\n          active: form._active,\n          asyncValidating: form._asyncValidating,\n          dirty: !allPristine,\n          error: formError,\n          errors: errors,\n          fields: allFields,\n          formKey: formKey,\n          invalid: !allValid,\n          pristine: allPristine,\n          submitting: form._submitting,\n          submitFailed: form._submitFailed,\n          valid: allValid,\n          values: values,\n          // Actions:\n          asyncValidate: (0, _silenceEvents2.default)(function () {\n            return _this4.asyncValidate();\n          }),\n          // ^ doesn't just pass this.asyncValidate to disallow values passing\n          destroyForm: (0, _silenceEvents2.default)(destroy),\n          handleSubmit: this.handleSubmit,\n          initializeForm: (0, _silenceEvents2.default)(function (initValues) {\n            return initialize(initValues, fields);\n          }),\n          resetForm: (0, _silenceEvents2.default)(reset),\n          touch: (0, _silenceEvents2.default)(function () {\n            return touch.apply(undefined, arguments);\n          }),\n          touchAll: (0, _silenceEvents2.default)(function () {\n            return touch.apply(undefined, fields);\n          }),\n          untouch: (0, _silenceEvents2.default)(function () {\n            return untouch.apply(undefined, arguments);\n          }),\n          untouchAll: (0, _silenceEvents2.default)(function () {\n            return untouch.apply(undefined, fields);\n          })\n        };\n        var passedProps = propNamespace ? (_ref2 = {}, _ref2[propNamespace] = props, _ref2) : props;\n\n        if (withRef) {\n          return React.createElement(WrappedComponent, _extends({}, _extends({}, passableProps, passedProps), {\n            ref: 'wrappedInstance'\n          }));\n        }\n\n        return React.createElement(WrappedComponent, _extends({}, passableProps, passedProps));\n      };\n\n      return ReduxForm;\n    }(Component);\n\n    ReduxForm.displayName = 'ReduxForm(' + (0, _getDisplayName2.default)(WrappedComponent) + ')';\n    ReduxForm.WrappedComponent = WrappedComponent;\n    ReduxForm.propTypes = {\n      // props:\n      alwaysAsyncValidate: _propTypes2.default.bool,\n      asyncBlurFields: _propTypes2.default.arrayOf(_propTypes2.default.string),\n      asyncValidate: _propTypes2.default.func,\n      dispatch: _propTypes2.default.func.isRequired,\n      fields: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,\n      form: _propTypes2.default.object,\n      initialValues: _propTypes2.default.any,\n      onSubmit: _propTypes2.default.func,\n      onSubmitSuccess: _propTypes2.default.func,\n      onSubmitFail: _propTypes2.default.func,\n      overwriteOnInitialValuesChange: _propTypes2.default.bool.isRequired,\n      propNamespace: _propTypes2.default.string,\n      readonly: _propTypes2.default.bool,\n      returnRejectedSubmitPromise: _propTypes2.default.bool,\n      submitPassback: _propTypes2.default.func.isRequired,\n      validate: _propTypes2.default.func,\n      // actions:\n      addArrayValue: _propTypes2.default.func.isRequired,\n      autofill: _propTypes2.default.func.isRequired,\n      blur: _propTypes2.default.func.isRequired,\n      change: _propTypes2.default.func.isRequired,\n      destroy: _propTypes2.default.func.isRequired,\n      focus: _propTypes2.default.func.isRequired,\n      initialize: _propTypes2.default.func.isRequired,\n      removeArrayValue: _propTypes2.default.func.isRequired,\n      reset: _propTypes2.default.func.isRequired,\n      startAsyncValidation: _propTypes2.default.func.isRequired,\n      startSubmit: _propTypes2.default.func.isRequired,\n      stopAsyncValidation: _propTypes2.default.func.isRequired,\n      stopSubmit: _propTypes2.default.func.isRequired,\n      submitFailed: _propTypes2.default.func.isRequired,\n      swapArrayValues: _propTypes2.default.func.isRequired,\n      touch: _propTypes2.default.func.isRequired,\n      untouch: _propTypes2.default.func.isRequired\n    };\n    ReduxForm.defaultProps = {\n      asyncBlurFields: [],\n      form: _reducer.initialState,\n      readonly: false,\n      returnRejectedSubmitPromise: false,\n      validate: function validate() {\n        return {};\n      }\n    }; // bind touch flags to blur and change\n\n    var unboundActions = _extends({}, importedActions, {\n      blur: (0, _bindActionData2.default)(importedActions.blur, {\n        touch: !!config.touchOnBlur\n      }),\n      change: (0, _bindActionData2.default)(importedActions.change, {\n        touch: !!config.touchOnChange\n      })\n    }); // make redux connector with or without form key\n\n\n    var decorate = formKey !== undefined && formKey !== null ? connect((0, _wrapMapStateToProps2.default)(mapStateToProps, function (state) {\n      var formState = getFormState(state, reduxMountPoint);\n\n      if (!formState) {\n        throw new Error('You need to mount the redux-form reducer at \"' + reduxMountPoint + '\"');\n      }\n\n      return formState && formState[formName] && formState[formName][formKey];\n    }), (0, _wrapMapDispatchToProps2.default)(mapDispatchToProps, (0, _bindActionData2.default)(unboundActions, {\n      form: formName,\n      key: formKey\n    })), mergeProps, options) : connect((0, _wrapMapStateToProps2.default)(mapStateToProps, function (state) {\n      var formState = getFormState(state, reduxMountPoint);\n\n      if (!formState) {\n        throw new Error('You need to mount the redux-form reducer at \"' + reduxMountPoint + '\"');\n      }\n\n      return formState && formState[formName];\n    }), (0, _wrapMapDispatchToProps2.default)(mapDispatchToProps, (0, _bindActionData2.default)(unboundActions, {\n      form: formName\n    })), mergeProps, options);\n    return decorate(ReduxForm);\n  };\n};\n\nexports.default = createHigherOrderComponent;","map":null,"metadata":{},"sourceType":"script"}