{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _isPromise = require('is-promise');\n\nvar _isPromise2 = _interopRequireDefault(_isPromise);\n\nvar _isValid = require('./isValid');\n\nvar _isValid2 = _interopRequireDefault(_isValid);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar handleSubmit = function handleSubmit(submit, values, props, asyncValidate) {\n  var dispatch = props.dispatch,\n      fields = props.fields,\n      onSubmitSuccess = props.onSubmitSuccess,\n      onSubmitFail = props.onSubmitFail,\n      startSubmit = props.startSubmit,\n      stopSubmit = props.stopSubmit,\n      submitFailed = props.submitFailed,\n      returnRejectedSubmitPromise = props.returnRejectedSubmitPromise,\n      touch = props.touch,\n      validate = props.validate;\n  var syncErrors = validate(values, props);\n  touch.apply(undefined, fields); // touch all fields\n\n  if ((0, _isValid2.default)(syncErrors)) {\n    var doSubmit = function doSubmit() {\n      var result = submit(values, dispatch, props);\n\n      if ((0, _isPromise2.default)(result)) {\n        startSubmit();\n        return result.then(function (submitResult) {\n          stopSubmit();\n\n          if (onSubmitSuccess) {\n            onSubmitSuccess(submitResult);\n          }\n\n          return submitResult;\n        }, function (submitError) {\n          stopSubmit(submitError);\n\n          if (onSubmitFail) {\n            onSubmitFail(submitError);\n          }\n\n          if (returnRejectedSubmitPromise) {\n            return Promise.reject(submitError);\n          }\n        });\n      }\n\n      if (onSubmitSuccess) {\n        onSubmitSuccess(result);\n      }\n\n      return result;\n    };\n\n    var asyncValidateResult = asyncValidate();\n    return (0, _isPromise2.default)(asyncValidateResult) ? // asyncValidateResult will be rejected if async validation failed\n    asyncValidateResult.then(doSubmit, function () {\n      submitFailed();\n\n      if (onSubmitFail) {\n        onSubmitFail();\n      }\n\n      return returnRejectedSubmitPromise ? Promise.reject() : Promise.resolve();\n    }) : doSubmit(); // no async validation, so submit\n  }\n\n  submitFailed();\n\n  if (onSubmitFail) {\n    onSubmitFail(syncErrors);\n  }\n\n  if (returnRejectedSubmitPromise) {\n    return Promise.reject(syncErrors);\n  }\n};\n\nexports.default = handleSubmit;","map":null,"metadata":{},"sourceType":"script"}