{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _fieldValue = require('./fieldValue');\n\nvar isMetaKey = function isMetaKey(key) {\n  return key[0] === '_';\n};\n/**\n * Sets an error on a field deep in the tree, returning a new copy of the state\n */\n\n\nvar setErrors = function setErrors(state, errors, destKey) {\n  var clear = function clear() {\n    if (Array.isArray(state)) {\n      return state.map(function (stateItem, index) {\n        return setErrors(stateItem, errors && errors[index], destKey);\n      });\n    }\n\n    if (state && typeof state === 'object') {\n      var result = Object.keys(state).reduce(function (accumulator, key) {\n        var _extends2;\n\n        return isMetaKey(key) ? accumulator : _extends({}, accumulator, (_extends2 = {}, _extends2[key] = setErrors(state[key], errors && errors[key], destKey), _extends2));\n      }, state);\n\n      if ((0, _fieldValue.isFieldValue)(state)) {\n        (0, _fieldValue.makeFieldValue)(result);\n      }\n\n      return result;\n    }\n\n    return (0, _fieldValue.makeFieldValue)(state);\n  };\n\n  if (typeof File !== 'undefined' && state instanceof File) {\n    return state;\n  }\n\n  if (!errors) {\n    if (!state) {\n      return state;\n    }\n\n    if (state[destKey]) {\n      var copy = _extends({}, state);\n\n      delete copy[destKey];\n      return (0, _fieldValue.makeFieldValue)(copy);\n    }\n\n    return clear();\n  }\n\n  if (typeof errors === 'string') {\n    var _extends3;\n\n    return (0, _fieldValue.makeFieldValue)(_extends({}, state, (_extends3 = {}, _extends3[destKey] = errors, _extends3)));\n  }\n\n  if (Array.isArray(errors)) {\n    if (!state || Array.isArray(state)) {\n      var _copy = (state || []).map(function (stateItem, index) {\n        return setErrors(stateItem, errors[index], destKey);\n      });\n\n      errors.forEach(function (errorItem, index) {\n        return _copy[index] = setErrors(_copy[index], errorItem, destKey);\n      });\n      return _copy;\n    }\n\n    return setErrors(state, errors[0], destKey); // use first error\n  }\n\n  if ((0, _fieldValue.isFieldValue)(state)) {\n    var _extends4;\n\n    return (0, _fieldValue.makeFieldValue)(_extends({}, state, (_extends4 = {}, _extends4[destKey] = errors, _extends4)));\n  }\n\n  var errorKeys = Object.keys(errors);\n\n  if (!errorKeys.length && !state) {\n    return state;\n  }\n\n  return errorKeys.reduce(function (accumulator, key) {\n    var _extends5;\n\n    return isMetaKey(key) ? accumulator : _extends({}, accumulator, (_extends5 = {}, _extends5[key] = setErrors(state && state[key], errors[key], destKey), _extends5));\n  }, clear() || {});\n};\n\nexports.default = setErrors;","map":null,"metadata":{},"sourceType":"script"}