{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Writes any potentially deep value from an object using dot and array syntax,\n * and returns a new copy of the object.\n */\n\n\nvar write = function write(path, value, object) {\n  var _extends7;\n\n  var dotIndex = path.indexOf('.');\n\n  if (dotIndex === 0) {\n    return write(path.substring(1), value, object);\n  }\n\n  var openIndex = path.indexOf('[');\n  var closeIndex = path.indexOf(']');\n\n  if (dotIndex >= 0 && (openIndex < 0 || dotIndex < openIndex)) {\n    var _extends2; // is dot notation\n\n\n    var key = path.substring(0, dotIndex);\n    return _extends({}, object, (_extends2 = {}, _extends2[key] = write(path.substring(dotIndex + 1), value, object[key] || {}), _extends2));\n  }\n\n  if (openIndex >= 0 && (dotIndex < 0 || openIndex < dotIndex)) {\n    var _extends6; // is array notation\n\n\n    if (closeIndex < 0) {\n      throw new Error('found [ but no ]');\n    }\n\n    var _key = path.substring(0, openIndex);\n\n    var index = path.substring(openIndex + 1, closeIndex);\n    var array = object[_key] || [];\n    var rest = path.substring(closeIndex + 1);\n\n    if (index) {\n      var _extends4; // indexed array\n\n\n      if (rest.length) {\n        var _extends3; // need to keep recursing\n\n\n        var dest = array[index] || {};\n        var arrayCopy = [].concat(array);\n        arrayCopy[index] = write(rest, value, dest);\n        return _extends({}, object || {}, (_extends3 = {}, _extends3[_key] = arrayCopy, _extends3));\n      }\n\n      var copy = [].concat(array);\n      copy[index] = typeof value === 'function' ? value(copy[index]) : value;\n      return _extends({}, object || {}, (_extends4 = {}, _extends4[_key] = copy, _extends4));\n    } // indexless array\n\n\n    if (rest.length) {\n      var _extends5; // need to keep recursing\n\n\n      if ((!array || !array.length) && typeof value === 'function') {\n        return object; // don't even set a value under [key]\n      }\n\n      var _arrayCopy = array.map(function (dest) {\n        return write(rest, value, dest);\n      });\n\n      return _extends({}, object || {}, (_extends5 = {}, _extends5[_key] = _arrayCopy, _extends5));\n    }\n\n    var result = void 0;\n\n    if (Array.isArray(value)) {\n      result = value;\n    } else if (object[_key]) {\n      result = array.map(function (dest) {\n        return typeof value === 'function' ? value(dest) : value;\n      });\n    } else if (typeof value === 'function') {\n      return object; // don't even set a value under [key]\n    } else {\n      result = value;\n    }\n\n    return _extends({}, object || {}, (_extends6 = {}, _extends6[_key] = result, _extends6));\n  }\n\n  return _extends({}, object, (_extends7 = {}, _extends7[path] = typeof value === 'function' ? value(object[path]) : value, _extends7));\n};\n\nexports.default = write;","map":null,"metadata":{},"sourceType":"script"}