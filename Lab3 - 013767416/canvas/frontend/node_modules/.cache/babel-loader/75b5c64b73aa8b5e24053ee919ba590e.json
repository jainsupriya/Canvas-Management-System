{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n/**\n * Given a state[field], get the value.\n *  Fallback to .initialValue when .value is undefined to prevent double render/initialize cycle.\n *  See {@link https://github.com/erikras/redux-form/issues/621}.\n */\n\nvar itemToValue = function itemToValue(_ref) {\n  var value = _ref.value,\n      initialValue = _ref.initialValue;\n  return typeof value !== 'undefined' ? value : initialValue;\n};\n\nvar getValue = function getValue(field, state, dest) {\n  var dotIndex = field.indexOf('.');\n  var openIndex = field.indexOf('[');\n  var closeIndex = field.indexOf(']');\n\n  if (openIndex > 0 && closeIndex !== openIndex + 1) {\n    throw new Error('found [ not followed by ]');\n  }\n\n  if (openIndex > 0 && (dotIndex < 0 || openIndex < dotIndex)) {\n    // array field\n    var key = field.substring(0, openIndex);\n    var rest = field.substring(closeIndex + 1);\n\n    if (rest[0] === '.') {\n      rest = rest.substring(1);\n    }\n\n    var array = state && state[key] || [];\n\n    if (rest) {\n      if (!dest[key]) {\n        dest[key] = [];\n      }\n\n      array.forEach(function (item, index) {\n        if (!dest[key][index]) {\n          dest[key][index] = {};\n        }\n\n        getValue(rest, item, dest[key][index]);\n      });\n    } else {\n      dest[key] = array.map(itemToValue);\n    }\n  } else if (dotIndex > 0) {\n    // subobject field\n    var _key = field.substring(0, dotIndex);\n\n    var _rest = field.substring(dotIndex + 1);\n\n    if (!dest[_key]) {\n      dest[_key] = {};\n    }\n\n    getValue(_rest, state && state[_key] || {}, dest[_key]);\n  } else {\n    dest[field] = state[field] && itemToValue(state[field]);\n  }\n};\n\nvar getValues = function getValues(fields, state) {\n  return fields.reduce(function (accumulator, field) {\n    getValue(field, state, accumulator);\n    return accumulator;\n  }, {});\n};\n\nexports.default = getValues;","map":null,"metadata":{},"sourceType":"script"}