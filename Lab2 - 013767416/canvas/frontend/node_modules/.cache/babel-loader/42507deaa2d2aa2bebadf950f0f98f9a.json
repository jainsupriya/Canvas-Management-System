{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.makeFieldValue = makeFieldValue;\nexports.isFieldValue = isFieldValue;\nvar flag = '_isFieldValue';\n\nvar isObject = function isObject(object) {\n  return typeof object === 'object';\n};\n\nfunction makeFieldValue(object) {\n  if (object && isObject(object)) {\n    // This flag has to be enumerable, because otherwise it is not possible\n    // to serialize object with this field.\n    // The consequence is you lose information that particular field is\n    // field or nested group of fields, so you're not able to fetch\n    // field value from state when it has been affected in some way\n    // by serializing/using immutable and so on.\n    // @fixme marking field as leaf should be made in other way\n    Object.defineProperty(object, flag, {\n      value: true,\n      enumerable: true\n    });\n  }\n\n  return object;\n}\n\nfunction isFieldValue(object) {\n  return !!(object && isObject(object) && object[flag]);\n}","map":null,"metadata":{},"sourceType":"script"}