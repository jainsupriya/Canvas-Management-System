{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _fieldValue = require('./fieldValue');\n\nvar makeEntry = function makeEntry(value, previousValue, overwriteValues) {\n  if (value === undefined && previousValue === undefined) return (0, _fieldValue.makeFieldValue)({});\n  return (0, _fieldValue.makeFieldValue)({\n    initial: value,\n    value: overwriteValues ? value : previousValue\n  });\n};\n/**\n * Sets the initial values into the state and returns a new copy of the state\n */\n\n\nvar initializeState = function initializeState(values, fields) {\n  var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var overwriteValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  if (!fields) {\n    throw new Error('fields must be passed when initializing state');\n  }\n\n  if (!values || !fields.length) {\n    return state;\n  }\n\n  var initializeField = function initializeField(path, src, dest) {\n    var dotIndex = path.indexOf('.');\n\n    if (dotIndex === 0) {\n      return initializeField(path.substring(1), src, dest);\n    }\n\n    var openIndex = path.indexOf('[');\n    var closeIndex = path.indexOf(']');\n    var result = _extends({}, dest) || {};\n\n    if (dotIndex >= 0 && (openIndex < 0 || dotIndex < openIndex)) {\n      // is dot notation\n      var key = path.substring(0, dotIndex);\n      result[key] = src[key] && initializeField(path.substring(dotIndex + 1), src[key], result[key] || {});\n    } else if (openIndex >= 0 && (dotIndex < 0 || openIndex < dotIndex)) {\n      // is array notation\n      if (closeIndex < 0) {\n        throw new Error('found \\'[\\' but no \\']\\': \\'' + path + '\\'');\n      }\n\n      var _key = path.substring(0, openIndex);\n\n      var srcArray = src[_key];\n      var destArray = result[_key];\n      var rest = path.substring(closeIndex + 1);\n\n      if (Array.isArray(srcArray)) {\n        if (rest.length) {\n          // need to keep recursing\n          result[_key] = srcArray.map(function (srcValue, srcIndex) {\n            return initializeField(rest, srcValue, destArray && destArray[srcIndex]);\n          });\n        } else {\n          result[_key] = srcArray.map(function (srcValue, srcIndex) {\n            return makeEntry(srcValue, destArray && destArray[srcIndex] && destArray[srcIndex].value, overwriteValues);\n          });\n        }\n      } else {\n        result[_key] = [];\n      }\n    } else {\n      result[path] = makeEntry(src && src[path], dest && dest[path] && dest[path].value, overwriteValues);\n    }\n\n    return result;\n  };\n\n  return fields.reduce(function (accumulator, field) {\n    return initializeField(field, values, accumulator);\n  }, _extends({}, state));\n};\n\nexports.default = initializeState;","map":null,"metadata":{},"sourceType":"script"}