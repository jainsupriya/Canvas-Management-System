{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createOnBlur = require('./events/createOnBlur');\n\nvar _createOnBlur2 = _interopRequireDefault(_createOnBlur);\n\nvar _createOnChange = require('./events/createOnChange');\n\nvar _createOnChange2 = _interopRequireDefault(_createOnChange);\n\nvar _createOnDragStart = require('./events/createOnDragStart');\n\nvar _createOnDragStart2 = _interopRequireDefault(_createOnDragStart);\n\nvar _createOnDrop = require('./events/createOnDrop');\n\nvar _createOnDrop2 = _interopRequireDefault(_createOnDrop);\n\nvar _createOnFocus = require('./events/createOnFocus');\n\nvar _createOnFocus2 = _interopRequireDefault(_createOnFocus);\n\nvar _silencePromise = require('./silencePromise');\n\nvar _silencePromise2 = _interopRequireDefault(_silencePromise);\n\nvar _read = require('./read');\n\nvar _read2 = _interopRequireDefault(_read);\n\nvar _updateField = require('./updateField');\n\nvar _updateField2 = _interopRequireDefault(_updateField);\n\nvar _isChecked = require('./isChecked');\n\nvar _isChecked2 = _interopRequireDefault(_isChecked);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getSuffix(input, closeIndex) {\n  var suffix = input.substring(closeIndex + 1);\n\n  if (suffix[0] === '.') {\n    suffix = suffix.substring(1);\n  }\n\n  return suffix;\n}\n\nvar getNextKey = function getNextKey(path) {\n  var dotIndex = path.indexOf('.');\n  var openIndex = path.indexOf('[');\n\n  if (openIndex > 0 && (dotIndex < 0 || openIndex < dotIndex)) {\n    return path.substring(0, openIndex);\n  }\n\n  return dotIndex > 0 ? path.substring(0, dotIndex) : path;\n};\n\nvar shouldAsyncValidate = function shouldAsyncValidate(name, asyncBlurFields) {\n  return (// remove array indices\n    ~asyncBlurFields.indexOf(name.replace(/\\[[0-9]+\\]/g, '[]'))\n  );\n};\n\nvar readField = function readField(state, fieldName) {\n  var pathToHere = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var fields = arguments[3];\n  var syncErrors = arguments[4];\n  var asyncValidate = arguments[5];\n  var isReactNative = arguments[6];\n  var props = arguments[7];\n  var callback = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : function () {\n    return null;\n  };\n  var prefix = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : '';\n  var asyncBlurFields = props.asyncBlurFields,\n      autofill = props.autofill,\n      blur = props.blur,\n      change = props.change,\n      focus = props.focus,\n      form = props.form,\n      initialValues = props.initialValues,\n      readonly = props.readonly,\n      addArrayValue = props.addArrayValue,\n      removeArrayValue = props.removeArrayValue,\n      swapArrayValues = props.swapArrayValues;\n  var dotIndex = fieldName.indexOf('.');\n  var openIndex = fieldName.indexOf('[');\n  var closeIndex = fieldName.indexOf(']');\n\n  if (openIndex > 0 && closeIndex !== openIndex + 1) {\n    throw new Error('found [ not followed by ]');\n  }\n\n  if (openIndex > 0 && (dotIndex < 0 || openIndex < dotIndex)) {\n    // array field\n    var key = fieldName.substring(0, openIndex);\n    var rest = getSuffix(fieldName, closeIndex);\n    var stateArray = state && state[key] || [];\n    var fullPrefix = prefix + fieldName.substring(0, closeIndex + 1);\n    var subfields = props.fields.reduce(function (accumulator, field) {\n      if (field.indexOf(fullPrefix) === 0) {\n        accumulator.push(field);\n      }\n\n      return accumulator;\n    }, []).map(function (field) {\n      return getSuffix(field, prefix.length + closeIndex);\n    });\n\n    var addMethods = function addMethods(dest) {\n      Object.defineProperty(dest, 'addField', {\n        value: function value(_value, index) {\n          return addArrayValue(pathToHere + key, _value, index, subfields);\n        }\n      });\n      Object.defineProperty(dest, 'removeField', {\n        value: function value(index) {\n          return removeArrayValue(pathToHere + key, index);\n        }\n      });\n      Object.defineProperty(dest, 'swapFields', {\n        value: function value(indexA, indexB) {\n          return swapArrayValues(pathToHere + key, indexA, indexB);\n        }\n      });\n      return dest;\n    };\n\n    if (!fields[key] || fields[key].length !== stateArray.length) {\n      fields[key] = fields[key] ? [].concat(fields[key]) : [];\n      addMethods(fields[key]);\n    }\n\n    var fieldArray = fields[key];\n    var changed = false;\n    stateArray.forEach(function (fieldState, index) {\n      if (rest && !fieldArray[index]) {\n        fieldArray[index] = {};\n        changed = true;\n      }\n\n      var dest = rest ? fieldArray[index] : {};\n      var nextPath = '' + pathToHere + key + '[' + index + ']' + (rest ? '.' : '');\n      var nextPrefix = '' + prefix + key + '[]' + (rest ? '.' : '');\n      var result = readField(fieldState, rest, nextPath, dest, syncErrors, asyncValidate, isReactNative, props, callback, nextPrefix);\n\n      if (fieldArray[index] !== result) {\n        if (rest) {\n          // if something's after [] in field name, the array item is an object field\n          // we need it to compare !== to the original (so react re-renders appropriately)\n          result = _extends({}, dest);\n        }\n\n        fieldArray[index] = result;\n        changed = true;\n      }\n    });\n\n    if (fieldArray.length > stateArray.length) {\n      // remove extra items that aren't in state array\n      fieldArray.splice(stateArray.length, fieldArray.length - stateArray.length);\n    }\n\n    if (changed) {\n      fieldArray = addMethods([].concat(fieldArray));\n    }\n\n    fields[key] = fieldArray;\n    return fieldArray;\n  }\n\n  if (dotIndex > 0) {\n    // subobject field\n    var _key = fieldName.substring(0, dotIndex);\n\n    var _rest = fieldName.substring(dotIndex + 1);\n\n    var subobject = fields[_key] || {};\n    var nextPath = pathToHere + _key + '.';\n    var nextKey = getNextKey(_rest);\n    var nextPrefix = prefix + _key + '.';\n    var previous = subobject[nextKey];\n    var result = readField(state[_key] || {}, _rest, nextPath, subobject, syncErrors, asyncValidate, isReactNative, props, callback, nextPrefix);\n\n    if (result !== previous) {\n      var _extends2;\n\n      subobject = _extends({}, subobject, (_extends2 = {}, _extends2[nextKey] = result, _extends2));\n    }\n\n    fields[_key] = subobject;\n    return subobject;\n  }\n\n  var name = pathToHere + fieldName;\n  var field = fields[fieldName] || {};\n\n  if (field.name !== name) {\n    var onChange = (0, _createOnChange2.default)(name, change, isReactNative);\n    var initialFormValue = (0, _read2.default)(name + '.initial', form);\n    var initialValue = initialFormValue || (0, _read2.default)(name, initialValues);\n    initialValue = initialValue === undefined ? '' : initialValue;\n    field.name = name;\n    field.checked = (0, _isChecked2.default)(initialValue);\n    field.value = initialValue;\n    field.initialValue = initialValue;\n\n    if (!readonly) {\n      field.autofill = function (value) {\n        return autofill(name, value);\n      };\n\n      field.onBlur = (0, _createOnBlur2.default)(name, blur, isReactNative, shouldAsyncValidate(name, asyncBlurFields) && function (blurName, blurValue) {\n        return (0, _silencePromise2.default)(asyncValidate(blurName, blurValue));\n      });\n      field.onChange = onChange;\n      field.onDragStart = (0, _createOnDragStart2.default)(name, function () {\n        return field.value;\n      });\n      field.onDrop = (0, _createOnDrop2.default)(name, change);\n      field.onFocus = (0, _createOnFocus2.default)(name, focus);\n      field.onUpdate = onChange; // alias to support belle. https://github.com/nikgraf/belle/issues/58\n    }\n\n    field.valid = true;\n    field.invalid = false;\n    Object.defineProperty(field, '_isField', {\n      value: true\n    });\n  }\n\n  var fieldState = (fieldName ? state[fieldName] : state) || {};\n  var syncError = (0, _read2.default)(name, syncErrors);\n  var updated = (0, _updateField2.default)(field, fieldState, name === form._active, syncError);\n\n  if (fieldName || fields[fieldName] !== updated) {\n    fields[fieldName] = updated;\n  }\n\n  callback(updated);\n  return updated;\n};\n\nexports.default = readField;","map":null,"metadata":{},"sourceType":"script"}